[{"id":373,"question":"What is the purpose of the 'sealed' keyword in C#?","optionA":"To prevent inheritance of a class","optionB":"To indicate that a class is abstract","optionC":"To mark a method as final","optionD":"To declare a constant","correctOption":"To indicate that a class is abstract","Type":"C#"},{"id":395,"question":"What is the purpose of the 'async/await' pattern in C#?","optionA":"To simplify asynchronous programming and improve code readability","optionB":"To handle exceptions","optionC":"To define attributes","optionD":"To create an event handler","correctOption":"To simplify asynchronous programming and improve code readability","Type":"C#"},{"id":72,"question":"How do you define an interface in C#?","optionA":"interface MyInterface {...}","optionB":"class MyInterface {...}","optionC":"interface = MyInterface {...}","optionD":"interface MyInterface = {...}","correctOption":"A","Type":"C#"},{"id":399,"question":"Which keyword is used to explicitly implement an interface in C#?","optionA":"implements","optionB":"interface","optionC":"explicit","optionD":"implements","correctOption":"interface","Type":"C#"},{"id":40,"question":"What is the purpose of the 'abstract' keyword in C#?","optionA":"A. To define a concrete class","optionB":"B. To define a class with abstract methods","optionC":"C. To define a static class","optionD":"D. To define a singleton class","correctOption":"B","Type":"C#"},{"id":122,"question":"How do you implement the Singleton pattern in C#?","optionA":"private static readonly Singleton instance = new Singleton();","optionB":"public static Singleton Instance { get { return instance; } }","optionC":"private Singleton() {}","optionD":"All of the above","correctOption":"A","Type":"C#"},{"id":139,"question":"How do you perform bitwise AND operation in C#?","optionA":"&","optionB":"|","optionC":"^","optionD":"~","correctOption":"A","Type":"C#"},{"id":32,"question":"What is the purpose of the 'Func' delegate in C#?","optionA":"A. To define a method with a single parameter","optionB":"B. To define a method with no parameters","optionC":"C. To define a method with multiple parameters","optionD":"D. To define a method with a return value","correctOption":"C","Type":"C#"},{"id":25,"question":"What is the purpose of the 'as' keyword in C#?","optionA":"A. To perform arithmetic operations","optionB":"B. To check for null","optionC":"C. To cast between incompatible types","optionD":"D. To define an alias for a namespace","correctOption":"C","Type":"C#"},{"id":48,"question":"What is the purpose of the 'continue' statement in a loop in C#?","optionA":"A. To exit the loop","optionB":"B. To skip the rest of the code in the loop and move to the next iteration","optionC":"C. To restart the loop","optionD":"D. To break out of the loop","correctOption":"B","Type":"C#"},{"id":18,"question":"What is the purpose of the 'this' keyword in C#?","optionA":"A. It refers to the current instance of the class","optionB":"B. It refers to the base class","optionC":"C. It refers to the derived class","optionD":"D. It refers to the global instance of the class","correctOption":"A","Type":"C#"},{"id":87,"question":"How do you define a default value for a parameter in a C# method?","optionA":"void MyMethod(int x = 10) {...}","optionB":"void MyMethod(int x) { x = 10; }","optionC":"void MyMethod(int x = default) {...}","optionD":"void MyMethod(int x) { x ??= 10; }","correctOption":"A","Type":"C#"},{"id":366,"question":"Which keyword is used to indicate that a method does not return a value in C#?","optionA":"void","optionB":"null","optionC":"none","optionD":"empty","correctOption":"void","Type":"C#"},{"id":368,"question":"What is the use of the 'as' operator in C#?","optionA":"To cast between compatible reference types","optionB":"To perform arithmetic operations","optionC":"To check for equality","optionD":"To convert a value type to a reference type","correctOption":"To cast between compatible reference types","Type":"C#"},{"id":70,"question":"How do you check if two strings are equal in C#?","optionA":"str1 == str2","optionB":"str1.Equals(str2)","optionC":"str1.CompareTo(str2) == 0","optionD":"All of the above","correctOption":"D","Type":"C#"},{"id":31,"question":"What is the purpose of the 'Action' delegate in C#?","optionA":"A. To define a method with a single parameter","optionB":"B. To define a method with no parameters","optionC":"C. To define a method with multiple parameters","optionD":"D. To define a method with a return value","correctOption":"B","Type":"C#"},{"id":5,"question":"What is the correct way to comment out a single line in C#?","optionA":"A. /* Comment */","optionB":"B. // Comment","optionC":"C. /* Comment","optionD":"C. # Comment","correctOption":"B","Type":"C#"},{"id":392,"question":"What is the purpose of the 'nameof' operator in C#?","optionA":"To obtain the name of a variable or a member","optionB":"To concatenate strings","optionC":"To perform arithmetic operations","optionD":"To create an alias for a type","correctOption":"To obtain the name of a variable or a member","Type":"C#"},{"id":130,"question":"How do you handle nullable types in C#?","optionA":"int? myNullableInt = null;","optionB":"Nullable<int> myNullableInt = null;","optionC":"int myNullableInt = null;","optionD":"All of the above","correctOption":"A","Type":"C#"},{"id":60,"question":"Which of the following is a reference type in C#?","optionA":"int","optionB":"float","optionC":"string","optionD":"struct","correctOption":"C","Type":"C#"},{"id":14,"question":"What is the purpose of the 'sealed' keyword in C#?","optionA":"A. To prevent a class from being instantiated","optionB":"B. To prevent a class from being inherited","optionC":"C. To prevent a method from being overridden","optionD":"D. To prevent a variable from being modified","correctOption":"B","Type":"C#"},{"id":405,"question":"What is the purpose of the 'using static' directive in C#?","optionA":"To allow accessing static members of a type without specifying the type name","optionB":"To include a namespace","optionC":"To define a constant","optionD":"To create an object","correctOption":"To define a constant","Type":"C#"},{"id":65,"question":"How do you create an object in C#?","optionA":"MyClass obj = new MyClass();","optionB":"Object obj = new Object();","optionC":"new MyClass() = obj;","optionD":"obj := new MyClass();","correctOption":"A","Type":"C#"},{"id":365,"question":"How do you create a new instance of a class in C#?","optionA":"Class obj = new Class()","optionB":"Class obj = create Class()","optionC":"Class obj = instantiate Class()","optionD":"Class obj = Class.create()","correctOption":"Class obj = new Class()","Type":"C#"},{"id":430,"question":"What is the purpose of the 'BinaryFormatter' class in C#?","optionA":"To serialize and deserialize objects","optionB":"To perform binary operations","optionC":"To define custom attributes","optionD":"To declare a constant value","correctOption":"To serialize and deserialize objects","Type":"C#"},{"id":84,"question":"How do you iterate through elements in an array in C#?","optionA":"for (int i = 0; i < array.Length; i++)","optionB":"foreach (var item in array)","optionC":"while (index < array.Length)","optionD":"All of the above","correctOption":"D","Type":"C#"},{"id":12,"question":"How do you convert a string to an integer in C#?","optionA":"A. Convert.ToInt32()","optionB":"B. int.Parse()","optionC":"C. int.Convert()","optionD":"D. string.ToInteger()","correctOption":"B","Type":"C#"},{"id":42,"question":"What is the purpose of the 'nameof' operator in C#?","optionA":"A. To get the name of a variable","optionB":"B. To get the name of a class","optionC":"C. To get the name of a method","optionD":"D. To get the name of a type","correctOption":"A","Type":"C#"},{"id":414,"question":"What is the purpose of the 'Span<T>.Slice()' method in C#?","optionA":"To create a new span from a specified range of elements","optionB":"To perform arithmetic operations","optionC":"To concatenate strings","optionD":"To declare a constant value","correctOption":"To create a new span from a specified range of elements","Type":"C#"},{"id":40,"question":"What is the purpose of the 'abstract' keyword in C#?","optionA":"A. To define a concrete class","optionB":"B. To define a class with abstract methods","optionC":"C. To define a static class","optionD":"D. To define a singleton class","correctOption":"B","Type":"C#"},{"id":399,"question":"Which keyword is used to explicitly implement an interface in C#?","optionA":"implements","optionB":"interface","optionC":"explicit","optionD":"implements","correctOption":"interface","Type":"C#"},{"id":17,"question":"How do you define a property in C#?","optionA":"A. property Type PropertyName { get; set; }","optionB":"B. Type propertyName { get; set; }","optionC":"C. property Type PropertyName { get { return value; } set { value = value; } }","optionD":"D. Type propertyName { get; set; } = value;","correctOption":"A","Type":"C#"},{"id":45,"question":"What is the purpose of the 'base' keyword in C#?","optionA":"A. To access the base class members","optionB":"B. To access the derived class members","optionC":"C. To access the global namespace","optionD":"D. To access the parent class members","correctOption":"A","Type":"C#"},{"id":30,"question":"What is the purpose of the 'params' keyword in C#?","optionA":"A. To define optional parameters","optionB":"B. To pass an array of parameters","optionC":"C. To define a variable number of parameters","optionD":"D. To define named parameters","correctOption":"C","Type":"C#"},{"id":73,"question":"Which keyword is used to explicitly release resources in C#?","optionA":"dispose","optionB":"delete","optionC":"free","optionD":"using","correctOption":"D","Type":"C#"},{"id":358,"question":"What does LINQ stand for in C#?","optionA":"Language-Integrated Query","optionB":"Linear Integration and Query","optionC":"Linking Internal Query","optionD":"Long Integration of Queries","correctOption":"Language-Integrated Query","Type":"C#"},{"id":433,"question":"What is the purpose of the 'async' and 'await' keywords in C# 5.0 and later versions?","optionA":"To simplify asynchronous programming and improve code readability","optionB":"To handle exceptions","optionC":"To define custom attributes","optionD":"To create an alias for a type","correctOption":"To simplify asynchronous programming and improve code readability","Type":"C#"},{"id":383,"question":"What is the purpose of the 'nameof' operator in C#?","optionA":"To obtain the name of a variable","optionB":"To concatenate strings","optionC":"To perform null-checking","optionD":"To create an alias for a type","correctOption":"To obtain the name of a variable","Type":"C#"},{"id":54,"question":"What is the purpose of the 'value' keyword in C#?","optionA":"A. To define a constant value","optionB":"B. To access the current value of a property","optionC":"C. To assign a value to a variable","optionD":"D. To define a variable value","correctOption":"B","Type":"C#"},{"id":101,"question":"How do you declare a constant in C#?","optionA":"const int MyConstant = 10;","optionB":"constant int MyConstant = 10;","optionC":"int const MyConstant = 10;","optionD":"MyConstant = 10;","correctOption":"A","Type":"C#"},{"id":2,"question":"Which of the following is NOT a data type in C#?","optionA":"A. int","optionB":"B. float","optionC":"C. chararray","optionD":"D. decimalarray","correctOption":"C","Type":"C#"},{"id":133,"question":"How do you define an extension method in C#?","optionA":"public static void MyMethod(this MyClass obj) {...}","optionB":"void MyMethod(extension MyClass obj) {...}","optionC":"public void MyMethod(MyClass obj) {...}","optionD":"public static MyClass MyMethod(MyClass obj) {...}","correctOption":"A","Type":"C#"},{"id":432,"question":"Which interface is used for sorting and searching arrays in C#?","optionA":"IComparable","optionB":"IEnumerable","optionC":"IList","optionD":"ICollection","correctOption":"IComparable","Type":"C#"},{"id":39,"question":"How do you implement method overloading in C#?","optionA":"A. By defining multiple methods with the same name","optionB":"B. By defining multiple methods with different return types","optionC":"C. By defining multiple methods with the same parameters","optionD":"D. By defining multiple methods with the same access modifier","correctOption":"C","Type":"C#"},{"id":10,"question":"Which of the following is the correct way to define a method in C#?","optionA":"A. methodName(){}","optionB":"B. void methodName() {}","optionC":"C. function methodName() {}","optionD":"D. methodName:void() {}","correctOption":"B","Type":"C#"},{"id":439,"question":"Which interface is used to represent a generic collection that supports enumeration in C#?","optionA":"IEnumerable","optionB":"IList","optionC":"ICollection","optionD":"IEnumerator","correctOption":"IEnumerable","Type":"C#"},{"id":33,"question":"What is the purpose of the 'Predicate' delegate in C#?","optionA":"A. To define a method with a single parameter","optionB":"B. To define a method with no parameters","optionC":"C. To define a method with multiple parameters","optionD":"D. To define a method that returns a boolean value","correctOption":"A","Type":"C#"},{"id":399,"question":"Which keyword is used to explicitly implement an interface in C#?","optionA":"implements","optionB":"interface","optionC":"explicit","optionD":"implements","correctOption":"interface","Type":"C#"},{"id":408,"question":"Which collection class is used to store key-value pairs in C#?","optionA":"Dictionary","optionB":"ArrayList","optionC":"HashSet","optionD":"LinkedList","correctOption":"Dictionary","Type":"C#"},{"id":34,"question":"What is the purpose of the 'EventHandler' delegate in C#?","optionA":"A. To handle events","optionB":"B. To define a method with a single parameter","optionC":"C. To define a method with no parameters","optionD":"D. To define a method with a return value","correctOption":"A","Type":"C#"},{"id":130,"question":"How do you handle nullable types in C#?","optionA":"int? myNullableInt = null;","optionB":"Nullable<int> myNullableInt = null;","optionC":"int myNullableInt = null;","optionD":"All of the above","correctOption":"A","Type":"C#"},{"id":378,"question":"Which attribute is used to enable versioning in a C# assembly?","optionA":"[Version]","optionB":"[AssemblyVersion]","optionC":"[Versioned]","optionD":"[AssemblyInfo]","correctOption":"[AssemblyVersion]","Type":"C#"},{"id":14,"question":"What is the purpose of the 'sealed' keyword in C#?","optionA":"A. To prevent a class from being instantiated","optionB":"B. To prevent a class from being inherited","optionC":"C. To prevent a method from being overridden","optionD":"D. To prevent a variable from being modified","correctOption":"B","Type":"C#"},{"id":38,"question":"What is the purpose of the 'dynamic' keyword in C#?","optionA":"A. To define a dynamic variable","optionB":"B. To create a dynamic array","optionC":"C. To work with dynamic types","optionD":"D. To define a dynamic method","correctOption":"C","Type":"C#"},{"id":405,"question":"What is the purpose of the 'using static' directive in C#?","optionA":"To allow accessing static members of a type without specifying the type name","optionB":"To include a namespace","optionC":"To define a constant","optionD":"To create an object","correctOption":"To define a constant","Type":"C#"}]