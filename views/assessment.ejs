<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multiple Grids</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        header {
            padding: 0.6em;
            background-color: azure;
            border: 1px solid grey;
        }

        #pageHeader {
            grid-area: header;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        #logo {
            width: 250px;
            height: auto;
            margin-right: 20px;
        }

        #adminInfo {
            display: flex;
            align-items: center;
        }

        #adminUsername {
            margin-right: 10px;
        }

        #sideLogo {
            width: 30px;
            height: auto;
            margin-right: 20px;
        }

        nav {
            background-color: grey;
            padding: 10px;
            text-align: center;
        }

        nav a {
            color: white;
            text-decoration: none;
            padding: 10px;
            margin: 0 10px;
            font-weight: bold;
            display: inline-block;
        }

        nav a:hover {
            background-color: #555;
        }

       /* Add these styles for grid layout in the nav section */
       nav-bar {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    grid-gap: 10px;
    background-color: rgb(226, 236, 233);
    padding: 10px;
    text-align: center;
    border: none;
   
}
 


nav-bar label{
    color: rgb(59, 56, 56);
    text-decoration: none;
    padding: 25px;
    font-weight: bold;
    display: block;
    border: 1px solid #222020; /* Add border for a neat look */
    border-radius: 5px; /* Add border radius for rounded corners */
    cursor: pointer;

}

nav-bar label input[text]{
border: #000;
}
nav-bar label.active {
    background-color: #fdfdfd;
   
}


        footer {
            color: #fff;
            text-align: center;
            position: fixed;
            width: 100%;
            bottom: 0;
        }

        #pageFooter {
            border: 1px solid grey;
            width: 100%;
            display: flex;
            align-items: center;
            padding: 10px;
            height: 100px;
            background-color: azure;
        }

        * {
            box-sizing: border-box;
        } 

        .dropdown-container {
            display: flex;
            align-items: center;
            margin-bottom: 20px; /* Adjust the margin between sections */
        }
       
        .dropdown {
            position: relative;
            font-size: 14px;
            color: #333;
            margin-left: 20px; /* Adjust the margin between labels and dropdowns */
        }

        .dropdown-list {
            padding: 12px;
            background: #fff;
            position: absolute;
            top: calc(100% + 5px); /* Adjust the spacing between label and dropdown */
            left: 0;
            right: 0;
            box-shadow: 0 1px 2px 1px rgba(0, 0, 0, .15);
            transform-origin: 50% 0;
            transform: scale(1, 0);
            transition: transform .15s ease-in-out .15s;
            max-height: 66vh;
            overflow-y: scroll;
            width: 250px; /* Adjust the width */
        }

        .dropdown-option {
            display: block;
            padding: 8px 12px;
            opacity: 0;
            transition: opacity .15s ease-in-out;
        }

        .dropdown-label {
            display: block;
            height: 30px;
            background: #fff;
            border: 1px solid #ccc;
            padding: 6px 12px;
            line-height: 1;
            cursor: pointer;
            width: 120px; /* Adjust the width */
            white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 150px; /* Set a maximum width to prevent it from becoming too wide */
    cursor: pointer; /* Add a pointer cursor to indicate it's clickable */
        }
        .dropdown:hover .dropdown-label {
    white-space: normal;
    overflow: visible;
    max-width: none;
}
        .dropdown-label:before {
            content: '▼';
            float: right;
        }

        .on .dropdown-list {
            transform: scale(1, 1);
            transition-delay: 0s;
        }

        .on .dropdown-option {
            opacity: 1;
            transition-delay: .2s;
        }

        .on .dropdown-label:before {
            content: '▲';
        }

        [type="checkbox"] {
            position: relative;
            top: -1px;
            margin-right: 4px;
        }

        [type="text"] {
            width: 80px;
            margin-left: 10px;
        }

        #direction {
            margin: 40px;
            display: flex;
        }

        .grid-container {
            display: none; /* Initially hide all grid containers */
        }

       

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #ecbfbf;
        }

       /* Add these styles for grid layout in the nav section */
       nav-bar {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    grid-gap: 10px;
    background-color: rgb(226, 236, 233);
    padding: 10px;
    text-align: center;
    border: none;
   
}

nav-bar label{
    color: rgb(59, 56, 56);
    text-decoration: none;
    padding: 10px;
    font-weight: bold;
    display: block;
    border: 1px solid #222020; /* Add border for a neat look */
    border-radius: 5px; /* Add border radius for rounded corners */
    cursor: pointer;
}

nav-bar label input[text]{
border: #000;
}
nav-bar label.active {
    background-color: #fdfdfd;
   
}

#assessment {
            color: #fff;
            font-weight: bold;
            background-color: #555;
        }


        footer {
            color: #fff;
            text-align: center;
            position: fixed;
            width: 100%;
            bottom: 0;
        }

        #pageFooter {
            border: 1px solid grey;
            width: 100%;
            display: flex;
            align-items: center;
            padding: 10px;
            height: 100px;
            background-color: azure;
        }
        .difficulty-buttons{
            display: flex;
            gap: 20px;
        }
        input[type="number"] {
    width: 40px;
    padding: 5px;
    box-sizing: border-box;
    border: 1px solid #5466b9;
    border-radius: 5px;
}
 .difficulty-buttons button {
    cursor: pointer;
    width: 80px;
    height: 40px;
    padding: 2px;
  /* Add border for a neat look */
    border-radius: 5px;
    margin-top: 10px; /* Adjust spacing as needed */
}
.question-grid {
    display: none;
    text-decoration: solid;
}

.difficulty-buttons .Easy {
    background-color: #d7ddd9; /* Green color */
    color: #0b0c0c; /* Text color */
    width: 65px;
    font-size: 0.9em;
}

.difficulty-buttons .Retrive {
    background-color: #d7ddd9; /* Green color */
    color: #0b0c0c; /* Text color */
    width: 65px;
    font-size: 0.9em;
}


.difficulty-buttons .Easy:focus {
    box-shadow: rgba(46, 164, 79, .4) 0 0 0 3px, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
}

.difficulty-buttons .Easy:hover {
    box-shadow: rgba(46, 164, 79, .4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #6ad878 0 -3px 0 inset;
    transform: translateY(-2px);
}

.difficulty-buttons .Easy:active {
    box-shadow: #298e46 0 3px 7px inset;
    transform: translateY(2px);
}

.difficulty-buttons .Medium {
    background-color: rgb(224, 224, 215); /* Yellow color for Medium */
    color: #72b4e0; /* Text color */
    width: 65px;
    font-size: 0.9em;
}
.difficulty-buttons .Medium:focus {
    box-shadow: #94cc3b(46, 164, 79, .4) 0 0 0 3px, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #a7df4d 0 -3px 0 inset;
}

.difficulty-buttons .Medium:hover {
    box-shadow: rgb(205, 250, 100) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #6ad878 0 -3px 0 inset;
    transform: translateY(-2px);
}

.difficulty-buttons .Hard {
    background-color: rgb(219, 217, 213); /* Orange color for Hard */
    color: #e72626; /* Text color */
    width: 65px;
    font-size: 0.9em;
}
.difficulty-buttons .Hard:focus {
    box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #df923b 0 -3px 0 inset;
}

.difficulty-buttons .Hard:hover {
    box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
    transform: translateY(-2px);
}

.difficulty-buttons .Hard:active {
    box-shadow: #D6D6E7 0 3px 7px inset;
    transform: translateY(2px);
}


.difficulty-buttons .Medium:focus {
    box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;

}
.difficulty-buttons .Medium:hover {
  box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
  transform: translateY(-2px);
}

.difficulty-buttons .Medium:active {
  box-shadow: #D6D6E7 0 3px 7px inset;
  transform: translateY(2px);
}
.difficulty-buttons .Hard :focus{
    box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;

}
.difficulty-buttons .Hard:hover {
  box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
  transform: translateY(-2px);
}

.difficulty-buttons .Hard:active {
  box-shadow: #D6D6E7 0 3px 7px inset;
  transform: translateY(2px);
}
.difficulty-buttons .Exclude :focus{
    box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;

}
.difficulty-buttons .Exclude:hover {
  box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
  transform: translateY(-2px);
}

.difficulty-buttons .Exclude:active {
  box-shadow: #D6D6E7 0 3px 7px inset;
  transform: translateY(2px);
}
.difficulty-buttons .Exclude{
    margin-left: 850px;
    width: 65px;
}
.difficulty-buttons .Include:focus {
    box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;

}
.difficulty-buttons .Include:hover {
  box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
  transform: translateY(-2px);
}

.difficulty-buttons .Include:active {
  box-shadow: #f77c7c 0 3px 7px inset;
  transform: translateY(2px);
}
.difficulty-buttons .Exclude {
    background-color: rgba(158, 202, 243, 0.904); /* Color for Exclude */
    color: #0b0c0c; /* Text color */
}

.difficulty-buttons .Include {
    background-color: rgb(206, 171, 164); /* Color for Include */
    color: #0b0c0c; /* Text color */
    width: 65px;
}
/* Add these styles for the explanation column buttons */
.grid-container .excludeBtn,
.grid-container .includeBtn {
    padding: 5px 10px;
    margin: 2px;
    cursor: pointer;
    border: none;
    border-radius: 5px;
}

.grid-container .excludeBtn {
    background-color: #f77c7c; /* Red color for Exclude button */
    color: #fff; /* White text color */
}

.grid-container .includeBtn {
    background-color: #aecfd4; /* Blue color for Include button */
    color: #fff; /* White text color */
}

/* Add these styles for the explanation column buttons */
.grid-container .excludeBtn,
.grid-container .includeBtn {
    padding: 5px 10px;
    margin: 2px;
    cursor: pointer;
    border: none;
    border-radius: 5px;
    display: block; /* Change display to block for vertical stacking */
}

.grid-container .excludeBtn:hover,
.grid-container .includeBtn:hover {
    opacity: 0.8; /* Reduce opacity on hover for a visual effect */
}

/* Add these styles for checkbox styling */
.grid-container input[type="checkbox"] {
    width: 20px; /* Set the width of the checkbox */
    height: 20px; /* Set the height of the checkbox */
    border: 2px solid #222020; /* Border color of the checkbox */
    border-radius: 5px; /* Border radius for rounded corners */
    cursor: pointer; /* Set cursor to pointer on hover */
}

.grid-container input[type="checkbox"]:checked {
    background-color: #7fdb9b; /* Background color when checkbox is checked */
    border-color: #7fdb9b; /* Border color when checkbox is checked */
}

/* Decrease the width of the "select questions" column */
.grid-container th:first-child,
.grid-container td:first-child {
    width: 50px; /* Set the desired width for the first column */
}

/* Adjust padding and styling as needed */
.grid-container th:first-child,
.grid-container td:first-child input[type="checkbox"] {
    margin: 0; /* Remove default margin */
    padding: 5px; /* Adjust padding as needed */
}
.labelinsidelabel{
    display: flex;
    height: 60px;
   margin-right: 25px;
 

}
.labelinsidelabel label {
        border: none; /* Remove borders */
        padding: 0; /* Remove padding */
        margin-right: 30px;
        margin-top: 15px;
      width: 40px;
         display: inline-block;
    }
    .HardNav {
      
    margin-left: 10px;
    }
        </style>
</head>
<body>
    <header id="pageHeader">
        <img src="/Images/Naresh_IT_Logo.png" alt="Logo" id="logo">
        <div id="adminInfo">
            <img src="/Images/adminlogo.jpg" alt="Side Logo" id="sideLogo">
            <div id="adminUsername"></div>
        </div>
    </header>
    <nav>
        <a href="#">List Of Assessment</a>
        <a href="#">Technology</a>
        <a href="#">Assessment</a>
        <a href="#" id="assessment">Question View</a>
        <a href="#">SheduleTime</a> 
    </nav>
    <div id="direction">
        <!-- Technology Name -->
        <div class="dropdown-container">
            <label>Selected Technology Name</label>
            <b><label id="technologyname" type="text"></lable></b>
           
        </div>

<div id="topicList"></div>

<div class="dropdown-container" style="margin-left: 110px;">
    <label>Module Name</label>
    <div class="dropdown" data-control="checkbox-dropdown">
        <label class="dropdown-label">Select</label>
        <div class="dropdown-list" id="moduleList">

            <!-- Dynamic content will be generated here -->
        </div>
    </div>
</div>

<!-- The dropdown-list container for topics -->
<div class="dropdown-container" style="margin-left: 110px;">
    <label>Topic Name</label>
    <div class="dropdown" data-control="checkbox-dropdown">
        <label class="dropdown-label">Select</label>
        <div class="dropdown-list" id="topicsList">
            <!-- Dynamic content will be generated here -->
        </div>
    </div>
</div>
        <!-- SubTopic Name -->



<div class="dropdown-container" style="margin-left: 110px;">
    <label>Sub Topic Name</label>
    <div class="dropdown" data-control="checkbox-dropdown">
        <label class="dropdown-label">Select</label>
        <div class="dropdown-list" id="subtopicsList">
            <!-- Dynamic content will be generated here -->
        </div>
    </div>
</div>
        <!-- SubTopic Name -->

    </div>


    <nav-bar>
        <label for="Mcq(Checkbox)"><input type="radio" name="select" id="mcqCheckBotton">Mcq(Checkbox)
            <span class="count">
                <input type="text" id="MCQCheckTotoalCount" name="MCQTotalCount" style="width: 40px" readonly>
            </span>
            <br>
            <div class="labelinsidelabel">
                <label for="EasyNav" >Easy
                    <input type="text" id="MCQEasyCount" name="EasyNav" style="width: 30px" >
                </label>
                
                <label for="MediumNav" >Medium
                    <input type="text" id ="MCQMediumCount"name="MediumNav" style="width: 30px" >
                </label>
                
                <label for="HardNav" >Hard
                    <input type="text" id="MCQHardCount" name="HardNav" style="width: 30px" >
                </label>
            </div>
        </label>
    </div>
        </label>
        <label for="FreeText"><input type="radio" name="select" onclick="showGrid('FreeText')">FreeText

            <span class="count">
                <input type="number" name="FreeText" style="width: 40px" readonly>
            </span>
            <br>
            <div class="labelinsidelabel">
                <label for="EasyNav" >Easy
                    <input type="number" id="FreeTextEasyCount"  name="EasyNav" style="width: 30px" readonly>
                </label>
                
                <label for="MediumNav" >Medium
                    <input type="number" name="MediumNav" style="width: 30px" readonly>
                </label>
                
                <label for="HardNav" >Hard
                    <input type="number" name="HardNav" style="width: 30px" readonly>
                </label>
            </div>
        </label>        
        <label for="Coding"><input type="radio" name="select" onclick="showGrid('Coding')">Coding
            <span class="count">
                <input type="number" name="Coding" style="width: 40px" readonly>
            </span>
            <br>
            <div class="labelinsidelabel">
                <label for="EasyNav" >Easy
                    <input type="number" name="EasyNav" style="width: 30px" readonly>
                </label>
                
                <label for="MediumNav" >Medium
                    <input type="number" name="MediumNav" style="width: 30px" readonly>
                </label>
                
                <label for="HardNav" >Hard
                    <input type="number" name="HardNav" style="width: 30px" readonly>
                </label>
            </div>
        </label>
        <label for="Matching"><input type="radio" name="select" onclick="showGrid('Matching')">Matching
            <span class="count">
                <input type="number" name="Matching" style="width: 40px" readonly>
            </span>
            <br>
            <div class="labelinsidelabel">
                <label for="EasyNav" >Easy
                    <input type="number" name="EasyNav" style="width: 30px" readonly>
                </label>
                
                <label for="MediumNav" >Medium
                    <input type="number" name="MediumNav" style="width: 30px" readonly>
                </label>
                
                <label for="HardNav" >Hard
                    <input type="number" name="HardNav" style="width: 30px" readonly>
                </label>
            </div>
        </label>
        <label for="Group-Questions"><input type="radio" name="select" onclick="showGrid('Group-Questions')">Group-Questions
            <span class="count">
                <input type="number" name="Group-Questions" style="width: 40px" readonly>
            </span>
            <br>
            <div class="labelinsidelabel">
                <label for="EasyNav" >Easy
                    <input type="number" name="EasyNav" style="width: 30px" readonly>
                </label>
                
                <label for="MediumNav" >Medium
                    <input type="number" name="MediumNav" style="width: 30px" readonly>
                </label>
                
                <label for="HardNav" >Hard
                    <input type="number" name="HardNav" style="width: 30px" readonly>
                </label>
            </div>
        </label>
        <label for="Mcq(Radiobutton)"><input type="radio" name="select" id="mcqRadioButton">Mcq(Radiobutton)
            <span class="count">
                <input type="number" name="Mcq(Radiobutton)" style="width: 40px">
            </span>
            <br>
            <div class="labelinsidelabel">
                <label for="EasyNav" >Easy
                    <input type="number" name="EasyNav" style="width: 30px">
                </label>
                
                <label for="MediumNav" >Medium
                    <input type="number" name="MediumNav" style="width: 30px">
                </label>
                
                <label for="HardNav" >Hard
                    <input type="number" name="HardNav" style="width: 30px">
                </label>
            </div>
        </label>


        <!-- Add more labels for other grids as needed -->
    </nav-bar>
    <div class="difficulty-buttons">
        <button class="Easy">Easy</button>
        <button class="Medium">Medium</button>
        <button class="Hard">Hard</button>
        <button id="btnRetriveQuestionfromDB" class="Retrive" onclick="ShowDynamicGrid()">Retrive Questions</button>
      
      
  <p>Total Questions Fetched: <span id="totalQuestionsCount">0</span></p>
  <p>Easy Count: <span id="easyCount">0</span></p>
  <p>Medium Count: <span id="mediumCount">0</span></p>
  <p>Hard Count: <span id="hardCount">0</span></p>

    <button class="Exclude" onclick="excludeRows()">Exclude</button>
        <button class="Include" onclick="includeRows()">Include</button>
</div>
<div id="McqCheckbox" class="grid-container1">
  <table id="mcqTable">
    <!-- Table Header Row -->
    <thead>
      <tr>
        <th>Select Questions</th>
        <th>Description</th>
        <th>Option 1</th>
        <th>Option 2</th>
        <th>Option 3</th>
        <th>Option 4</th>
        <th>Option 5</th>
        <th>Option 6</th>
        <th>Correct Answer</th>
        <th>Explanation</th>
        <!-- Add more table cells for additional columns if needed -->
      </tr>
    </thead>
    <tbody>
      <!-- Table body content will be dynamically populated -->
    </tbody>
  </table>
</div>

<div id="McqRadioBox" class="grid-container1">
  <table id="McqRadiobutton">
    <!-- Table Header Row -->
    <thead>
      <tr>
        <th>Select Questions</th>
        <th>Description</th>
        <th>Option 1</th>
        <th>Option 2</th>
        <th>Option 3</th>
        <th>Option 4</th>
       
        <th>Correct Answer</th>
        <th>Explanation</th>
        <!-- Add more table cells for additional columns if needed -->
      </tr>
    </thead>
    <tbody>
      <!-- Table body content will be dynamically populated -->
    </tbody>
  </table>
</div>





    <div id="Mcq(Radiobutton)" class="grid-container">
       
        <table>
            <thead>
                <tr>
              <th>select questions</th>
                <th>Description</th>   
                <th>Option 1</th> 
                <th>Option 2</th> 
                <th>Option 3</th>  
                <th>Option 4</th>               
                <th>Correct Answer</th>
                <th>Explanation</th>
                <!-- Add more table cells for additional columns if needed -->
                    <!-- Add more columns as needed -->
                    

                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 1, Cell 2</td>
                    <td>Row 1, Cell 3</td>
                    <td>Row 1, Cell 4</td>
                    <td>Row 1, Cell 5</td>
                    <td>Row 1, Cell 6</td>
                    <td>Row 1, Cell 7</td>
                    <td>Row 1, Cell 8</td>
                    <!-- Add more cells as needed -->
                </tr>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 2, Cell 2</td>
                    <td>Row 3, Cell 3</td>
                    <td>Row 3, Cell 4</td>
                    <td>Row 3, Cell 5</td>
                    <td>Row 3, Cell 6</td>
                    <td>Row 3, Cell 7</td>
                    <td>Row 3, Cell 8</td>
                    <!-- Add more cells as needed -->
                </tr>
                <!-- Add more rows as needed -->
            </tbody>
        </table>
    </div>
    <div id="FreeText" class="grid-container">
    
        <table>
            <thead>
                <tr>
                    <th>select questions</th>
                    <th>Description</th>                 
                    <th>Correct Answer</th>
                    <th>Explanation</th>
                    <!-- Add more columns as needed -->
        

                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 1, Cell 2</td>
                    <td>Row 1, Cell 3</td>
                    <td>Row 1, Cell 4</td>
                  
                    <!-- Add more cells as needed -->
                </tr>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 2, Cell 2</td>
                    <td>Row 3, Cell 3</td>
                    <td>Row 3, Cell 4</td>
            
                    <!-- Add more cells as needed -->
                </tr>
                <!-- Add more rows as needed -->
            </tbody>
        </table>
    </div>
    <div id="Group-Questions" class="grid-container">
   
        <table>
            <thead>
                <tr>
                    <th>select questions</th>
                    <th>Description</th>                 
                    <th>Correct Answer</th>
                    <th>Explanation</th>
                    <!-- Add more columns as needed -->
                

                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 1, Cell 2</td>
                    <td>Row 1, Cell 3</td>
                    <td>Row 1, Cell 4</td>
                    <!-- Add more cells as needed -->
                </tr>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 2, Cell 2</td>
                    <td>Row 2, Cell 3</td>
                    <td>Row 2, Cell 4</td>
                    
                    <!-- Add more cells as needed -->
                </tr>
                <!-- Add more rows as needed -->
            </tbody>
        </table>
    </div>
    <div id="Matching" class="grid-container">
  
        <table>
            <thead>
                <tr>
                    <th>select questions</th>
                    <th>Description</th>                 
                    <th>Correct Answer</th>
                    <th>Explanation</th>
                    <!-- Add more columns as needed -->
                  
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 1, Cell 2</td>
                    <td>Row 1, Cell 3</td>
                    <td>Row 1, Cell 4</td>
                   
                    <!-- Add more cells as needed -->
                </tr>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 3, Cell 1</td>
                    <td>Row 3, Cell 2</td>
                    <td>Row 3, Cell 3</td>
              
                  
                    <!-- Add more cells as needed -->
                </tr>
                <!-- Add more rows as needed -->
            </tbody>
        </table>
    </div>
    <div id="Coding" class="grid-container">
      
        <table>
            <thead>
                <tr>
                    <th>select questions</th>
                    <th>Description</th>                 
                    <th>Correct Answer</th>
                    <th>Explanation</th>
           
                    <!-- Add more columns as needed -->
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 1, Cell 2</td>
                    <td>Row 1, Cell 3</td>
                    <td>Row 1, Cell 4</td>
                 
                 
                    <!-- Add more cells as needed -->
                </tr>
                <tr>
                    <td><input type="checkbox" name="questionCheckbox[]" /></td>
                    <td>Row 2, Cell 2</td>
                    <td>Row 2, Cell 3</td>
                    <td>Row 2, Cell 4</td>
                
                  
                   
                    <!-- Add more cells as needed -->
                </tr>
                <!-- Add more rows as needed -->
            </tbody>

        </table>
    </div>
   
    <div>
     <a href="/sheduletime">
        <button style="background-color: #4caf50; color: white; padding: 3px auto; width: 80px; margin: 25px 0px 0px 670px; height: 40px; border: none; border-radius: 3px;">Shedule Test</button>
        </a>
    </div>
   <footer style="background-color: azure; color:black; padding: 10px; text-align: center; margin-top: 400px;">
        &copy;  2023 Naresh i Technologies | Software Training - Online | All Rights Reserved.
    </footer>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/datetime/1.5.1/js/dataTables.dateTime.min.js"></script>
    <script>
    let originalData = [];
    let MCQCheckTotalCount =0;
        document.querySelectorAll('.dropdown-label').forEach(function (label) {
            label.addEventListener('click', function () {
                this.parentNode.classList.toggle('on');
            });
        });
          $(document).ready(function() {
          
    updateElements();
  });


      function ShowDynamicGrid() {


      let GridId = "NA";

      let QuestionType= "NA";

      if (mcqRadioButton.checked) 
      {
                   
             QuestionType= "Radio";
             GridId ="McqRadioBox";
      
      }
      else if(mcqCheckBotton.checked)
      {
               QuestionType= "Check";
             GridId ="McqCheckbox";
      
      }


       const TechnologyId = getQueryParam('technologyId');
    const ModuleId = localStorage.getItem('ModuleId');
     const TopicId = localStorage.getItem('TopicId');
      const SubTopicId = localStorage.getItem('SubTopicId');
    // Fetch questions based on counts
    fetch(/mcqQuestions?TechnologyId=${TechnologyId}&ModuleId=${ModuleId}&TopicId=${TopicId}&SubTopicId=${SubTopicId}&Type=${QuestionType})
      .then(response => response.json())
      .then(data => {
        // Call a function to populate the HTML table with the retrieved data

        populateTable(data, GridId,0);
      })
      .catch(error => console.error('Error:', error));
  }
  function updateTotalQuestionsCount(count) {
 $(#totalQuestionsCount).text(count);
}

function updateDifficultyCount(difficulty, count) {

if(difficulty !=0)
{
 switch (difficulty) {
      case 1:
       $(#easyCount).text(count);
        break;
      case 2:
       $(#mediumCount).text(count);
        break;
      case 3:
         $(#hardCount).text(count);
       
    }

    }
    else
    {
     $(#easyCount).text(count);
     $(#mediumCount).text(count);
      $(#hardCount).text(count);
    }

}



   function ShowDynamicCheckGrid(gridId) {

   const TechnologyId = getQueryParam('technologyId');
    const ModuleId = localStorage.getItem(ModuleId);
     const TopicId = localStorage.getItem(TopicId);
      const SubTopicId = localStorage.getItem(SubTopicId);
   

    // Fetch questions based on counts
    fetch(/mcqCheckQuestions?TechnologyId=${TechnologyId}&ModuleId=${ModuleId}&TopicId=${TopicId}&SubTopicId=${SubTopicId})
      .then(response => response.json())
      .then(data => {
        // Call a function to populate the HTML table with the retrieved data
        populateCheckTable(data, gridId);
      })
      .catch(error => console.error('Error:', error));



  }


  document.addEventListener('DOMContentLoaded', () => {
    // Your code that runs after the DOM is fully loaded
  });
 ///this is the function to exclude selected questions when we click on exclude button
    function excludeRows() {
    const table1 = document.getElementById('Mcq(Checkbox)');
    const table2 = document.getElementById('Mcq(Radiobutton)');
    const table3 = document.getElementById('FreeText');
    const table4 = document.getElementById('Group-Questions');
    const table5 = document.getElementById('Matching');
    const table6 = document.getElementById('Coding');
    excludeRowsFromEachGrd(table1);
    excludeRowsFromEachGrd(table2);
    excludeRowsFromEachGrd(table3);
    excludeRowsFromEachGrd(table4);
    excludeRowsFromEachGrd(table5);
    excludeRowsFromEachGrd(table6);
  }

function getQueryParam(name) {
  try {
    const sessionStorageData = JSON.parse(sessionStorage.getItem('questionselectiondata')) || {};
    return sessionStorageData[name];
  } catch (error) {
    console.error('Error parsing JSON from sessionStorage:', error.message);
    return null;
  }
}
function updateTotalCount() {
  const MCQCheckboxEasyCount = parseInt(getQueryParam('MCQCheckboxEasyCount') || 0);
  const MCQCheckboxMediumCount = parseInt(getQueryParam('MCQCheckboxMediumCount') || 0);
  const MCQCheckboxHardCount = parseInt(getQueryParam('MCQCheckboxHardCount') || 0);

  const totalCount = MCQCheckboxEasyCount + MCQCheckboxMediumCount + MCQCheckboxHardCount;

  // Update the value of the total count input field
  $('#MCQCheckTotoalCount').val(totalCount);
}
    function generateModuleHTML(module) {
        return `
            <label class="dropdown-option">
                <a href="#" class="module-link" data-module-id="${module.ModuleID}">${module.ModuleName}</a>
               
            </label>
        `;
    }
    function generateSubTopicHTML(subtopic) {
        return `
            <label class="dropdown-option">
                <a href="#" class="subtopic-link" data-topic-id="${subtopic.SubTopicID}">${subtopic.SubTopicName}</a>
              
            </label>
        `;
    }

      function generateTopicHTML(topic) {
        return `
            <label class="dropdown-option">
                <a href="#" class="topic-link" data-topic-id="${topic.TopicID}">${topic.TopicName}</a>
              
            </label>
        `;
    }

  

function updateElements() {
  const technologyId = getQueryParam('technologyId');
   localStorage.setItem("ModuleId","0");
             localStorage.setItem("SubTopicId","0");
              localStorage.setItem("TopicId","0");
 $(document).ready(function () {
        // Fetch modules from the API
        $.ajax({
            url: '/fetchModules/' + technologyId, // Replace with your actual API endpoint for modules
            type: 'GET',
            success: function (modules) {
                // Populate the dropdown-list with dynamic content based on API response
                var moduleList = $('#moduleList');
                modules.forEach(function (module) {
                    moduleList.append(generateModuleHTML(module));
                });
            },
            error: function (error) {
                console.error('Error fetching modules:', error.responseText);
                // Handle error, e.g., show an error message in the UI
            }
        });

        // Function to generate dynamic HTML for modules
        function generateModuleHTML(module) {
            return `
                <label class="dropdown-option">
                    <a href="#" class="module-link" data-module-id="${module.ModuleID}">${module.ModuleName}</a>
                    
                </label>
            `;
        }

        // Event listener for module selection
        $(document).on('click', '.module-link', function (e) {
            e.preventDefault(); // Prevent default link behavior
            var selectedModuleId = $(this).data('module-id');
           var selectedModuleName = $(this).text();
$('.dropdown-label', $(this).closest('.dropdown')).text(selectedModuleName);
$(this).closest('.dropdown').toggleClass('on off');
 
             localStorage.setItem("ModuleId",selectedModuleId);
             localStorage.setItem("SubTopicId","0");
              localStorage.setItem("TopicId","0");
            // Make an AJAX request to fetch topics
            $.ajax({
                url: /fetchTopics/${selectedModuleId},
                method: 'GET',
                dataType: 'json',
                success: function (topics) {
                    // Assuming you have a dropdown with id="topicDropdown"
                    var topicDropdown = $('#topicsList');

                    // Clear existing options
                    topicDropdown.empty();

                    // Add default option
                    topicDropdown.append('<option value="">Select Topic</option>');
                      // Populate the dropdown-list with dynamic content based on API response
                //var topicsList = $('#topicsList');
                topics.forEach(function (topic) {
                    topicDropdown.append(generateTopicHTML(topic));
                     
                });
                
                  $('.dropdown-label', topicDropdown.closest('.dropdown')).text(selectedModuleName);

            // Toggle the dropdown state
            topicDropdown.closest('.dropdown').toggleClass('on off');
                },
                error: function (error) {
                    console.error('Error fetching topics:', error);
                    // Handle error
                }
            });
        });
    });

    // Event listener for module selection
        $(document).on('click', '.topic-link', function (e) {
            e.preventDefault(); // Prevent default link behavior

            var selectTopicId = $(this).data('topic-id');
         
             localStorage.setItem("TopicId",selectTopicId);
              localStorage.setItem("SubTopicId","0");
                        var selectedTopicName = $(this).text();
$('.dropdown-label', $(this).closest('.dropdown')).text(selectedTopicName);
$(this).closest('.dropdown').toggleClass('on off');

            // Make an AJAX request to fetch topics
            $.ajax({
                url: /fetchSubTopics/${selectTopicId},
                method: 'GET',
                dataType: 'json',
                success: function (subtopics) {
                    // Assuming you have a dropdown with id="topicDropdown"
                    var subtopicDropdown = $('#subtopicsList');

                    // Clear existing options
                    subtopicDropdown.empty();

                    // Add default option
                    subtopicDropdown.append('<option value="">Select Sub Topic</option>');
                      // Populate the dropdown-list with dynamic content based on API response
               // var subtopicsList = $('#subtopicsList');
                subtopics.forEach(function (subtopic) {
                    subtopicDropdown.append(generateSubTopicHTML(subtopic));
                
                });
                 $('.dropdown-label', subtopicDropdown.closest('.dropdown')).text(selectedTopicName);

            // Toggle the dropdown state
            subtopicDropdown.closest('.dropdown').toggleClass('on off');
                },
                error: function (error) {
                    console.error('Error fetching topics:', error);
                    // Handle error
                }
            });
            });   
            
            $(document).on('click', '.subtopic-link', function (e) {

            // e.preventDefault(); // Prevent default link behavior

            var selectsubTopicId = $(this).data('topic-id');
             localStorage.setItem("SubTopicId",selectsubTopicId);
             $('.module-link').toggleClass('on off');
                

                    var selectedSubTopicName = $(this).text();
$('.dropdown-label', $(this).closest('.dropdown')).text(selectedSubTopicName);
$(this).closest('.dropdown').toggleClass('on off');
                       

            }); 


  const technologyName = getQueryParam('technologyName');

  const MCQCheckboxEasyCount = getQueryParam('MCQCheckboxEasyCount');
  const MCQCheckboxMediumCount = getQueryParam('MCQCheckboxMediumCount');
  const MCQCheckboxHardCount = getQueryParam('MCQCheckboxHardCount');
 
  const MCQRadioQuestionInput = getQueryParam('MCQRadioQuestionInput');
  const MCQRadioEasyCount = getQueryParam('MCQRadioEasyCount');
  const MCQRadioMediumCount = getQueryParam('MCQRadioMediumCount');
  const MCQRadioHardCount = getQueryParam('MCQRadioHardCount');
  const FreeQuestionInput = getQueryParam('FreeQuestionInput');
  const FreeQuestionEasyCount = getQueryParam('FreeQuestionEasyCount');
  const FreeQuestionMediumCount = getQueryParam('FreeQuestionMediumCount');
  const FreeQuestionHardCount = getQueryParam('FreeQuestionHardCount');
 
  const CodingQuestionInput = getQueryParam('CodingQuestionInput');
  const CodingQuestionEasyCount = getQueryParam('CodingQuestionEasyCount');
  const CodingQuestionMediumCount = getQueryParam('CodingQuestionMediumCount');
  const CodingQuestionHardCount = getQueryParam('CodingQuestionHardCount');

  $("#technologyname").text(technologyName);
  $("#MCQEasyCount").val(MCQCheckboxEasyCount);
  
  $("#MCQMediumCount").val(MCQCheckboxMediumCount);
    $("#MCQHardCount").val(MCQCheckboxHardCount);

    updateTotalCount();
  // Update the values of the corresponding elements
  
  
}
$('#MCQEasyCount').on('input', function () {
  // Call the function when the easy count changes
  updateTotalCount();
});

$('#MCQMediumCount').on('input', function () {
  // Call the function when the medium count changes
  updateTotalCount();
});

$('#MCQHardCount').on('input', function () {
  // Call the function when the hard count changes
  updateTotalCount();
});

  function excludeRowsFromEachGrd(table1){
    const checkboxes = table1.querySelectorAll('input[type="checkbox"]:checked');   
    checkboxes.forEach(checkbox => {
      const row = checkbox.closest('tr');
      row.parentNode.removeChild(row);
    });
  }
  function excludeRowsFromEachGrd(table2){
    const checkboxes = table2.querySelectorAll('input[type="checkbox"]:checked');   
    checkboxes.forEach(checkbox => {
      const row = checkbox.closest('tr');
      row.parentNode.removeChild(row);
    });
  }
  function excludeRowsFromEachGrd(table3){
    const checkboxes = table3.querySelectorAll('input[type="checkbox"]:checked');   
    checkboxes.forEach(checkbox => {
      const row = checkbox.closest('tr');
      row.parentNode.removeChild(row);
    });
  }
  function excludeRowsFromEachGrd(table4){
    const checkboxes = table4.querySelectorAll('input[type="checkbox"]:checked');   
    checkboxes.forEach(checkbox => {
      const row = checkbox.closest('tr');
      row.parentNode.removeChild(row);
    });
  }
  function excludeRowsFromEachGrd(table5){
    const checkboxes = table5.querySelectorAll('input[type="checkbox"]:checked');   
    checkboxes.forEach(checkbox => {
      const row = checkbox.closest('tr');
      row.parentNode.removeChild(row);
    });
  }
  function excludeRowsFromEachGrd(table6){
    const checkboxes = table6.querySelectorAll('input[type="checkbox"]:checked');   
    checkboxes.forEach(checkbox => {
      const row = checkbox.closest('tr');
      row.parentNode.removeChild(row);
    });
  }
  function handleCheckboxSelection(questionId) {
  // Perform actions when a checkbox is selected
  console.log(Checkbox selected for question ID: ${questionId});
  // You can perform additional actions or store the selected question IDs as needed
}

function updateMCQCheckTotalCount() {
    // Assuming MCQCheckTotalCount is an HTML element with an ID
    const MCQCheckTotalCountElement = document.getElementById('MCQCheckTotoalCount');

    // Get the current count
    let count = parseInt(MCQCheckTotalCountElement.textContent);

    // Decrement the count
    count--;

    // Update the content of the element
    MCQCheckTotalCountElement.textContent = count;

    // Show an alert if the count becomes zero
    if (count === 0) {
        alert('Limit reached: No more questions can be selected.');
    }
}


 
function populateTable(data, gridId, difficultyLevel) {
  const tableBody = document.querySelector(#${gridId} table tbody);
  tableBody.innerHTML = ''; // Clear existing rows

  // Filter data based on difficulty level
  const filteredData = (difficultyLevel === 0) ? data : data.filter(row => row.DifficultyLevelID === difficultyLevel);

  updateTotalQuestionsCount(filteredData.length); // Assuming you have a function to update total question count

  filteredData.forEach(row => {
    const newRow = tableBody.insertRow();

    // Set background color based on DifficultyLevelID
    let backgroundColor = '';
    switch (row.DifficultyLevelID) {
      case 1:
        backgroundColor = 'lightgreen'; // Easy
        break;
      case 2:
        backgroundColor = 'lightblue'; // Medium
        break;
      case 3:
        backgroundColor = 'lightcoral'; // Hard
        break;
      default:
        backgroundColor = ''; // Default color
    }

    // Assign the row HTML with the specified background color
    newRow.innerHTML = `
      <td><input type="checkbox" name="questionCheckbox[]" /></td>
      <td style="background-color: ${backgroundColor}">${row.Question}</td>
      <td style="background-color: ${backgroundColor}">${row.OptionA}</td>
      <td style="background-color: ${backgroundColor}">${row.OptionB}</td>
      <td style="background-color: ${backgroundColor}">${row.OptionC}</td>
      <td style="background-color: ${backgroundColor}">${row.OptionD}</td>
      <td style="background-color: ${backgroundColor}">${row.OptionE}</td>
      <td style="background-color: ${backgroundColor}">${row.OptionF}</td>
      <td style="background-color: ${backgroundColor}">${row.CorrectAnswer}</td>
      <td style="background-color: ${backgroundColor}">${row.Explanation}</td>
      <!-- Add more cells as needed -->
    `;

    // Add an event listener to the checkbox for selection
    const checkbox = newRow.querySelector('input[name="questionCheckbox[]"]');
    checkbox.addEventListener('change', function () {
      if (this.checked) {
        // Checkbox is checked
        handleCheckboxSelection(row.QuestionID); // Pass the question ID
        updateMCQCheckTotalCount(MCQCheckTotalCount - 1);

        // Check if the total count is zero and show an alert
        if (MCQCheckTotalCount === 0) {
          alert('Limit reached. Cannot select more questions.');
        }
      }
    });
  });

  // Set the initial value for MCQCheckTotalCount based on the number of rows
  updateMCQCheckTotalCount(filteredData.length);
}

document.querySelector('.Easy').addEventListener('click', function () {
  populateTable(originalData, 'McqCheckbox', 1); // 1 corresponds to Easy difficulty
});

document.querySelector('.Medium').addEventListener('click', function () {
  populateTable(originalData, 'McqCheckbox', 2); // 2 corresponds to Medium difficulty
});

document.querySelector('.Hard').addEventListener('click', function () {
  populateTable(originalData, 'McqCheckbox', 3); // 3 corresponds to Hard difficulty
});

  
 function populatecheckTable(data, gridId) {
    const tableBody = document.querySelector(#${gridId} table tbody);
    tableBody.innerHTML = ''; // Clear existing rows

    data.forEach(row => {
      const newRow = tableBody.insertRow();
      newRow.innerHTML = `
        <td><input type="checkbox" name="questionCheckbox[]" /></td>
        <td>${row.Question}</td>
        <td>${row.OptionA}</td>
        <td>${row.OptionB}</td>
        <td>${row.OptionC}</td>
        <td>${row.OptionD}</td>
        <td>${row.CorrectAnswer}</td>
        <td>${row.Explanation}</td>
        <!-- Add more cells as needed -->
      `;
    });
  }
</script>
</body>
</html>
