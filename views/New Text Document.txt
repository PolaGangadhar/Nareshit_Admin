'use strict';
const fs = require('fs');
const http = require('http');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const morgan = require('morgan');
const sql = require('mssql');
const { promisify } = require('util');
const compression = require('compression');

const app = express();
const PORT = process.env.PORT || 3000ss;

// JSON file path for caching
const cacheFilePath = path.join(__dirname, 'questionCache.json');

// SQL Server connection configuration
const sqlConfig = {
    user: 'nareshit',
    password: 'Password@123',
    server: 'cmsit.database.windows.net',
    database: 'cmdexamdb',
    options: {
        encrypt: true,
        trustServerCertificate: false,
    },
};

// Connection Pool setup
const pool = new sql.ConnectionPool({
    ...sqlConfig,
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000,
    },
});
pool.connect();
const queryAsync = promisify(pool.query).bind(pool);

// Middleware
app.use(morgan('dev'));
app.use(compression());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.get('/favicon.ico', (req, res) => res.status(204));

// Set the view engine to EJS and specify the views directory
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Warm-up during application startup
async function warmUp() {
    try {s
        await pool.connect();
        const warmUpQuestions = await fetchQuestionsFromCache(5); // Try to fetch from cache first
        console.log('Warm-up complete.');
    } catch (error) {
        console.error('Error during warm-up:', error.message);
    } finally {
        await sql.close();
    }
}

warmUp();

// Routes
app.get('/', (req, res) => {
    res.send('Welcome to the Exam Page Dotnet Assignment 98858');
});

// Route to render a form for the user to input the number of questions
app.get('/selectQuestions', (req, res) => {
    res.render('selectQuestions');
});

// Route to render the exam page with a specific question
app.get('/exam', async (req, res) => {
    const index = parseInt(req.query.index, 10) || 0;
    try {
        const questions = await fetchQuestionsFromCache(1); // Fetch one question at a time
        const currentQuestion = questions[0];
        res.render('examPage', { currentQuestion, currentIndex: index, totalQuestions: questions.length, questions }); // Pass 'questions' variable to the template
    } catch (error) {
        console.error('Error fetching questions:', error.message);
        res.status(500).json({ message: 'Error fetching questions.' });
    }
});
app.get('/exam', async (req, res) => {
    const index = parseInt(req.query.index, 10) || 0;
    try {
        const questions = await fetchQuestionsFromCache(1); // Fetch one question at a time
        const currentQuestion = questions[0];
        res.render('examPage', { currentQuestion, currentIndex: index, totalQuestions: questions.length, questions }); // Pass 'questions' variable to the template
    } catch (error) {
        console.error('Error fetching questions:', error.message);
        res.status(500).json({ message: 'Error fetching questions.' });
    }
});
// Route for processing the form submission and fetching questions from the database
app.post('/startTest', async (req, res) => {
    try {
        const numberOfQuestions = parseInt(req.body.numberOfQuestions, 10);

        // Fetch questions from cache or database
        const questions = await fetchQuestionsFromCache(numberOfQuestions);
        // Render the exam page with the selected questions
        res.render('examPage', { currentQuestion: questions[0], currentIndex: 0, totalQuestions: questions.length, questions }); // Pass 'questions' variable to the template
    } catch (error) {
        console.error('Error fetching questions:', error.message);
        res.status(500).json({ message: 'Error fetching questions.' });
    }
});

// Function to fetch a specific number of questions from cache or the database
async function fetchQuestionsFromCache(numberOfQuestions) {
    try {
        // Try to fetch from cache first
        const cachedQuestions = readFromCache();
        if (cachedQuestions && cachedQuestions.length >= numberOfQuestions) {
            const selectedQuestions = cachedQuestions.slice(0, numberOfQuestions);
            return selectedQuestions;
        }

        // Fetch the remaining questions from the database
        const remainingQuestions = numberOfQuestions - (cachedQuestions ? cachedQuestions.length : 0);
        const dbQuestions = await fetchQuestionsFromDatabase(remainingQuestions);

        // Update cache with combined questions
        const combinedQuestions = [...(cachedQuestions || []), ...dbQuestions];
        updateCache(combinedQuestions);

        return combinedQuestions;
    } catch (error) {
        throw new Error(`Error fetching questions: ${error.message}`);
    }
}

// Function to read questions from the local cache
function readFromCache() {
    try {
        if (fs.existsSync(cacheFilePath)) {
            const cacheData = fs.readFileSync(cacheFilePath, 'utf-8');
            return JSON.parse(cacheData);
        }
        return null;
    } catch (error) {
        console.error('Error reading from cache:', error.message);
        return null;
    }
}

// Function to update the local cache with new questions
function updateCache(questions) {
    try {
        const cacheData = JSON.stringify(questions);
        fs.writeFileSync(cacheFilePath, cacheData, 'utf-8');
    } catch (error) {
        console.error('Error updating cache:', error.message);
    }
}

// Function to fetch a specific number of questions from the database
async function fetchQuestionsFromDatabase(numberOfQuestions) {
    try {
        await pool.connect();
        const result = await queryAsync(`SELECT TOP ${numberOfQuestions} * FROM dbo.MCQQuestionALL ORDER BY NEWID()`);
        const questions = result.recordset;
        return questions;
    } catch (error) {
        throw new Error(`Error fetching questions from the database: ${error.message}`);
    } finally {
        await sql.close();
    }
}

// Create an HTTP server and pass the Express app as a request listener
const server = http.createServer(app);

// Start Server
server.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
